@using MudBlazor.Services
@using ResizeOptions = MudBlazor.Services.ResizeOptions
@using BlazorWebCV.State
@inherits LayoutComponentBase
@inject NavigationManager navMan
@inject IBreakpointService BreakpointListener
<MudThemeProvider Theme="currentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<CascadingValue Value="CurrentBreakPoint" Name="Breakpoint">
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
            <MudFab Size="Size.Small" OnClick="@((e) => DarkMode())" Icon="@Icons.Material.Filled.WbSunny" IconColor="color" Style="background-color: gray"></MudFab>
            <MudSpacer/>
            <b style="cursor: pointer;" @onclick="Click">
                <MudText Typo="@(CurrentBreakPoint.Equals(Breakpoint.Xs) ? Typo.h6 : Typo.h4)">Karakoulak Spyridon</MudText>
            </b>
            <MudSpacer/>
            <MudTooltip Text="Hello ðŸ™‚!">
                <MudAvatar Image="/images/AvatarReal.jpg"/>
            </MudTooltip>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="2">
            <CascadingValue Value="@theme" Name="theme">
                <NavMenuLeft/>
            </CascadingValue>
        </MudDrawer>
        <MudMainContent Style="overflow: hidden">
                <MudCard Elevation="5" Style="@($"position: fixed;top:{(CurrentBreakPoint.Equals(Breakpoint.Xs) ? "15vh" : "25vh")};z-index: 9999;height: 450px;width: 280px;visibility: {visibility}")">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Chat</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Minimize"
                                           @onclick="@(() => IsChatOpen = !IsChatOpen)"
                                           Color="Color.Default"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <Chat @bind-Messages="ChatMessagesContainer.ChatMessages"></Chat>
                    </MudCardContent>
                </MudCard>
            <MudAvatar Style="position: fixed;top:90vh;z-index: 9999;border: none;cursor: pointer"
                       @onclick="@(() => IsChatOpen = !IsChatOpen)"
                       Elevation="5"
                       Size="Size.Large"
                       Variant="Variant.Outlined">
                <MudIcon Color="MudBlazor.Color.Default" Icon="@Icons.Material.Filled.Message" Size="Size.Large"/>
            </MudAvatar>
            <CascadingValue Value="@theme" Name="theme">
                @Body
            </CascadingValue>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code{
    [Inject] ChatMessagesContainer ChatMessagesContainer { get; set; }
    protected override void OnInitialized()
    {
        currentTheme = darkTheme;
        color = Color.Inherit;
    }

    private bool IsChatOpen
    {
        get { return visibility == "hidden"; }
        set { visibility = value ? "hidden" : "visible"; }
    }
    private string visibility = "hidden";
    private void Click()
    {
        navMan.NavigateTo("/");
    }

    void DarkMode()
    {
        if (currentTheme == defaultTheme)
        {
            currentTheme = darkTheme;
            theme = "dark";
            color = Color.Inherit;
            StateHasChanged();
        }
        else
        {
            currentTheme = defaultTheme;
            theme = "light";
            color = Color.Dark;
            StateHasChanged();
        }
    }

    Color color = Color.Success;
    MudTheme currentTheme = new MudTheme();

    MudTheme defaultTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = "#272c34",
            AppbarBackground = "#32333d"
        }
    };

    private string theme = "dark";

    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(93, 255, 0, 1)",
            DrawerIcon = "rgba(93, 255, 0, 1)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(93, 255, 0, 1)",
            TextPrimary = "rgba(93, 255, 0, 1)",
            TextSecondary = "rgba(93, 255, 0, 1)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(93, 255, 0, 0.4)",
            DividerLight = "rgba(93, 255, 0, 0.4)",
            TableLines = "rgba(93, 255, 0, 1)",
            LinesDefault = "rgba(93, 255, 0, 1)",
            LinesInputs = "rgba(93, 255, 0, 0.4)",
            TextDisabled = "rgba(255,255,255, 0.2)"
        }
    };

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private Guid _subscriptionId;
    private Breakpoint CurrentBreakPoint;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
            {
                CurrentBreakPoint = breakpoint;
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
            {
                ReportRate = 250,
                NotifyOnBreakpointOnly = true,
            });
            CurrentBreakPoint = subscriptionResult.Breakpoint;
            _subscriptionId = subscriptionResult.SubscriptionId;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);

}